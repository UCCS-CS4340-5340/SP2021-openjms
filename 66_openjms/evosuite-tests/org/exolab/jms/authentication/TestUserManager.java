/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.authentication;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Iterator;
import org.exolab.jms.authentication.User;
import org.exolab.jms.authentication.UserManager;
import org.exolab.jms.config.Configuration;
import org.exolab.jms.config.SecurityConfiguration;
import org.exolab.jms.config.Users;
import org.exolab.jms.persistence.DatabaseService;
import org.exolab.jms.persistence.PersistenceException;
import org.exolab.jms.service.ServiceException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestUserManager {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      // Undeclared exception!
      try {
        userManager0.removeFromUserCache((User) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      User user0 = new User("2C-{Cwwj}KIH'b)", "2C-{Cwwj}KIH'b)");
      User user1 = userManager0.getUser(user0);
      assertNull(user1);
  }

  @Test
  public void test2()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      try {
        userManager0.start();
        fail("Expecting exception: ServiceException");
      } catch(ServiceException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      assertNotNull(userManager0);
      
      User user0 = new User();
      userManager0.addToUserCache(user0);
      boolean boolean0 = userManager0.createUser(user0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      userManager0.doStop();
      assertNull(userManager0.getName());
  }

  @Test
  public void test5()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      Iterator<Object> iterator0 = userManager0.userNames();
      assertEquals(false, iterator0.hasNext());
  }

  @Test
  public void test6()  throws Throwable  {
      DatabaseService databaseService0 = DatabaseService.getInstance();
      UserManager userManager0 = null;
      try {
        userManager0 = new UserManager((Configuration) null, databaseService0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'config' is null
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      UserManager userManager0 = null;
      try {
        userManager0 = new UserManager(configuration0, (DatabaseService) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'database' is null
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      Users users0 = new Users();
      configuration0.setUsers(users0);
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      org.exolab.jms.config.User user0 = new org.exolab.jms.config.User();
      users0.addUser(user0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      userManager0.registerConfiguredUsers();
      assertEquals("Service:[name=nullstarted=false]", userManager0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      assertNotNull(userManager0);
      
      User user0 = new User();
      boolean boolean0 = userManager0.updateUser(user0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      assertNotNull(userManager0);
      
      User user0 = new User();
      userManager0.addToUserCache(user0);
      boolean boolean0 = userManager0.updateUser(user0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      assertNotNull(userManager0);
      
      User user0 = new User("", "");
      boolean boolean0 = userManager0.deleteUser(user0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      assertNotNull(userManager0);
      
      User user0 = new User("", "");
      userManager0.addToUserCache(user0);
      boolean boolean0 = userManager0.deleteUser(user0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      SecurityConfiguration securityConfiguration0 = new SecurityConfiguration();
      configuration0.setSecurityConfiguration(securityConfiguration0);
      securityConfiguration0.setSecurityEnabled(true);
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      assertNotNull(userManager0);
      
      boolean boolean0 = userManager0.validateUser("", "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      SecurityConfiguration securityConfiguration0 = new SecurityConfiguration();
      configuration0.setSecurityConfiguration(securityConfiguration0);
      securityConfiguration0.setSecurityEnabled(true);
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      assertNotNull(userManager0);
      
      User user0 = new User("", "");
      userManager0.addToUserCache(user0);
      boolean boolean0 = userManager0.validateUser("", "");
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Configuration configuration0 = new Configuration();
      DatabaseService databaseService0 = new DatabaseService(configuration0);
      UserManager userManager0 = new UserManager(configuration0, databaseService0);
      userManager0.registerConfiguredUsers();
      assertNull(userManager0.getName());
  }
}
