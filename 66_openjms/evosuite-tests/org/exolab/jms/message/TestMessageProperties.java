/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.message;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Enumeration;
import javax.jms.JMSException;
import javax.jms.MessageFormatException;
import org.exolab.jms.message.MessageProperties;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestMessageProperties {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      messageProperties0.setByteProperty("Jat", (byte)0);
  }

  @Test
  public void test1()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      // Undeclared exception!
      try {
        messageProperties0.getIntProperty("l'TI");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      try {
        messageProperties0.setFloatProperty("JMSXR", 0.0F);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * Property=JMSXR cannot be set by clients
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      messageProperties0.setJMSXRcvTimestamp(1L);
  }

  @Test
  public void test4()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      messageProperties0.setShortProperty("Jat", (short) (byte)0);
  }

  @Test
  public void test5()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      // Undeclared exception!
      try {
        messageProperties0.getShortProperty("Jat");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      try {
        messageProperties0.setDoubleProperty("", (double) (-1366L));
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * zero-length name is not a valid property name
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      assertNotNull(messageProperties0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      messageProperties0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(92, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001sr\u0000\u0011java.util.HashMap\u0005\u0007\uFFFD\uFFFD\uFFFD\u0016`\uFFFD\u0003\u0000\u0002F\u0000\nloadFactorI\u0000\tthresholdxp?@\u0000\u0000\u0000\u0000\u0000\u0018w\b\u0000\u0000\u0000 \u0000\u0000\u0000\u0000x", byteArrayOutputStream0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      // Undeclared exception!
      try {
        messageProperties0.getFloatProperty("nst");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      messageProperties0.setLongProperty("w", 1935L);
  }

  @Test
  public void test10()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      // Undeclared exception!
      try {
        messageProperties0.getByteProperty("|bWDpt6dZm?FF");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      try {
        messageProperties0.setIntProperty("JMSXGroupSeq", (-642));
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * JMSXGroupSeq must have a value > 0
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      Enumeration<Object> enumeration0 = messageProperties0.getPropertyNames();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test13()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      // Undeclared exception!
      try {
        messageProperties0.getLongProperty("jmsxgroupseq");
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * null
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      messageProperties0.setStringProperty("JMSXGroupID", "JMSXGroupID");
  }

  @Test
  public void test15()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      Object object0 = messageProperties0.getObjectProperty("w");
      assertNull(object0);
  }

  @Test
  public void test16()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      // Undeclared exception!
      try {
        messageProperties0.getDoubleProperty((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      try {
        messageProperties0.setBooleanProperty("null", false);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * name=null is a reserved word; it cannot be used as a property name
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      boolean boolean0 = messageProperties0.propertyExists("l'TI");
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      messageProperties0.clearProperties();
  }

  @Test
  public void test20()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      boolean boolean0 = messageProperties0.getBooleanProperty("l'TI");
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      assertNotNull(messageProperties0);
      
      MessageProperties messageProperties1 = (MessageProperties)messageProperties0.clone();
      assertNotNull(messageProperties1);
      assertNotSame(messageProperties1, messageProperties0);
  }

  @Test
  public void test22()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      String string0 = messageProperties0.getStringProperty("(-?B@^");
      assertNull(string0);
  }

  @Test
  public void test23()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      Boolean boolean0 = Boolean.FALSE;
      messageProperties0.setObjectProperty("w", (Object) boolean0);
      assertEquals(false, boolean0.booleanValue());
  }

  @Test
  public void test24()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      try {
        messageProperties0.setObjectProperty((String) null, "");
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * <null> is not a valid property name
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      Short short0 = new Short((short)1319);
      try {
        messageProperties0.setObjectProperty("J9R)DHY", (Object) short0);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * name=J9R)DHY is not a valid property name
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      Class<Short> class0 = Short.TYPE;
      try {
        messageProperties0.setObjectProperty("name=", (Object) class0);
        fail("Expecting exception: MessageFormatException");
      } catch(MessageFormatException e) {
        /*
         * Message.setObjectProperty() does not support objects of type=java.lang.Class
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      try {
        messageProperties0.setObjectProperty("JMSXGroupID", (Object) null);
        fail("Expecting exception: MessageFormatException");
      } catch(MessageFormatException e) {
        /*
         * Property=JMSXGroupID may not be null
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      try {
        messageProperties0.setObjectProperty("(-?B@^", (Object) null);
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * name=(-?B@^ is not a valid property name
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      try {
        messageProperties0.setDoubleProperty("JMSXGroupSeq", (-8.133838156469315));
        fail("Expecting exception: MessageFormatException");
      } catch(MessageFormatException e) {
        /*
         * Expected type=java.lang.Integer for property=JMSXGroupSeq, but got type=java.lang.Double
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      MessageProperties messageProperties0 = new MessageProperties();
      messageProperties0.setIntProperty("JMSXGroupSeq", 9);
  }
}
