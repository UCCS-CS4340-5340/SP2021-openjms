/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.message;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import javax.jms.JMSException;
import javax.jms.MessageEOFException;
import javax.jms.MessageFormatException;
import javax.jms.MessageNotReadableException;
import org.exolab.jms.message.StreamMessageImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestStreamMessageImpl {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      try {
        streamMessageImpl0.readShort();
        fail("Expecting exception: MessageNotReadableException");
      } catch(MessageNotReadableException e) {
        /*
         * Message in write-only mode
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      try {
        streamMessageImpl0.readLong();
        fail("Expecting exception: MessageNotReadableException");
      } catch(MessageNotReadableException e) {
        /*
         * Message in write-only mode
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      try {
        streamMessageImpl0.readDouble();
        fail("Expecting exception: MessageNotReadableException");
      } catch(MessageNotReadableException e) {
        /*
         * Message in write-only mode
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      try {
        streamMessageImpl0.readInt();
        fail("Expecting exception: MessageNotReadableException");
      } catch(MessageNotReadableException e) {
        /*
         * Message in write-only mode
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      try {
        streamMessageImpl0.readObject();
        fail("Expecting exception: MessageNotReadableException");
      } catch(MessageNotReadableException e) {
        /*
         * Message in write-only mode
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      Short short0 = new Short((short)886);
      streamMessageImpl0.writeObject((Object) short0);
      streamMessageImpl0.writeDouble(79.86736902573006);
      assertEquals("StreamMessage", streamMessageImpl0.getJMSType());
  }

  @Test
  public void test6()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.writeChar('=');
      streamMessageImpl0.reset();
      assertEquals('=', streamMessageImpl0.readChar());
      
      streamMessageImpl0.readString();
  }

  @Test
  public void test7()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      try {
        streamMessageImpl0.readByte();
        fail("Expecting exception: MessageNotReadableException");
      } catch(MessageNotReadableException e) {
        /*
         * Message in write-only mode
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.writeInt(0);
      assertEquals("StreamMessage", streamMessageImpl0.getJMSType());
  }

  @Test
  public void test9()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.writeString("q*9V&@m8uf&Kk}L2{5q");
      streamMessageImpl0.reset();
      // Undeclared exception!
      try {
        streamMessageImpl0.readFloat();
        fail("Expecting exception: NumberFormatException");
      } catch(NumberFormatException e) {
        /*
         * For input string: \"q*9V&@m8uf&Kk}L2{5q\"
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.writeFloat((float) (byte)4);
      assertEquals("StreamMessage", streamMessageImpl0.getJMSType());
  }

  @Test
  public void test11()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      StreamMessageImpl streamMessageImpl1 = (StreamMessageImpl)streamMessageImpl0.clone();
      assertEquals("StreamMessage", streamMessageImpl0.getJMSType());
      assertNotNull(streamMessageImpl1);
      assertEquals("StreamMessage", streamMessageImpl1.getJMSType());
  }

  @Test
  public void test12()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.reset();
      StreamMessageImpl streamMessageImpl1 = (StreamMessageImpl)streamMessageImpl0.clone();
      assertNotNull(streamMessageImpl1);
      assertEquals("StreamMessage", streamMessageImpl1.getJMSType());
  }

  @Test
  public void test13()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.writeObject((Object) "Topic name: NONE");
      StreamMessageImpl streamMessageImpl1 = (StreamMessageImpl)streamMessageImpl0.clone();
      assertEquals("StreamMessage", streamMessageImpl1.getJMSType());
      assertNotNull(streamMessageImpl1);
  }

  @Test
  public void test14()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.reset();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1489);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) pipedOutputStream0);
      streamMessageImpl0.writeExternal((ObjectOutput) objectOutputStream0);
  }

  @Test
  public void test15()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      streamMessageImpl0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000sr\u0000$org.exolab.jms.message.MessageHeader\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001pppw\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000psr\u0000\u001Borg.exolab.jms.message.Type\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000S\u0000t\u0000r\u0000e\u0000a\u0000m\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000expppppw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000xsr\u0000(org.exolab.jms.message.MessageProperties\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001sr\u0000\u0011java.util.HashMap\u0005\u0007\uFFFD\uFFFD\uFFFD\u0016`\uFFFD\u0003\u0000\u0002F\u0000\nloadFactorI\u0000\tthresholdxp?@\u0000\u0000\u0000\u0000\u0000\u0018w\b\u0000\u0000\u0000 \u0000\u0000\u0000\u0000xxw\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(371, byteArrayOutputStream0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Short short0 = new Short((short)886);
      streamMessageImpl0.writeObject((Object) short0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      streamMessageImpl0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(374, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u001A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000sr\u0000$org.exolab.jms.message.MessageHeader\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001pppw\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000psr\u0000\u001Borg.exolab.jms.message.Type\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\r\u0000S\u0000t\u0000r\u0000e\u0000a\u0000m\u0000M\u0000e\u0000s\u0000s\u0000a\u0000g\u0000expppppw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000xsr\u0000(org.exolab.jms.message.MessageProperties\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001sr\u0000\u0011java.util.HashMap\u0005\u0007\uFFFD\uFFFD\uFFFD\u0016`\uFFFD\u0003\u0000\u0002F\u0000\nloadFactorI\u0000\tthresholdxp?@\u0000\u0000\u0000\u0000\u0000\u0018w\b\u0000\u0000\u0000 \u0000\u0000\u0000\u0000xxw\u000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0003\u0004\u0003v", byteArrayOutputStream0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      byte[] byteArray0 = new byte[7];
      streamMessageImpl0.setReadOnly(true);
      try {
        streamMessageImpl0.readBytes(byteArray0);
        fail("Expecting exception: MessageEOFException");
      } catch(MessageEOFException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      byte[] byteArray0 = new byte[7];
      streamMessageImpl0.writeBytes(byteArray0);
      streamMessageImpl0.setReadOnly(true);
      streamMessageImpl0.readBytes(byteArray0);
      assertEquals(true, streamMessageImpl0.getReadOnly());
      
      try {
        streamMessageImpl0.readChar();
        fail("Expecting exception: MessageFormatException");
      } catch(MessageFormatException e) {
        /*
         * Cannot read the next field until the byte array is read
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.writeBoolean(true);
      byte[] byteArray0 = new byte[7];
      streamMessageImpl0.setReadOnly(true);
      try {
        streamMessageImpl0.readBytes(byteArray0);
        fail("Expecting exception: MessageFormatException");
      } catch(MessageFormatException e) {
        /*
         * Expected type=byte[], but got type=boolean
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      Boolean boolean0 = Boolean.FALSE;
      streamMessageImpl0.writeObject((Object) boolean0);
      assertEquals("StreamMessage", streamMessageImpl0.getJMSType());
  }

  @Test
  public void test21()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      // Undeclared exception!
      try {
        streamMessageImpl0.writeString((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * Argument value is null
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      byte[] byteArray0 = new byte[6];
      streamMessageImpl0.writeBytes(byteArray0, 0, 1);
      assertEquals("StreamMessage", streamMessageImpl0.getJMSType());
  }

  @Test
  public void test23()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.writeObject((Object) null);
      assertEquals("StreamMessage", streamMessageImpl0.getJMSType());
  }

  @Test
  public void test24()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      Long long0 = new Long(1L);
      streamMessageImpl0.writeObject((Object) long0);
      assertEquals("StreamMessage", streamMessageImpl0.getJMSType());
  }

  @Test
  public void test25()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      Double double0 = new Double((-1.0));
      streamMessageImpl0.writeObject((Object) double0);
      assertEquals("StreamMessage", streamMessageImpl0.getJMSType());
  }

  @Test
  public void test26()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      try {
        streamMessageImpl0.writeObject((Object) streamMessageImpl0);
        fail("Expecting exception: MessageFormatException");
      } catch(MessageFormatException e) {
        /*
         * Objects of type org.exolab.jms.message.StreamMessageImpl are not supported by StreamMessage
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.reset();
      streamMessageImpl0.setReadOnly(true);
      assertEquals(true, streamMessageImpl0.getReadOnly());
      assertEquals("StreamMessage", streamMessageImpl0.getJMSType());
  }

  @Test
  public void test28()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.writeByte((byte)1);
      streamMessageImpl0.reset();
      streamMessageImpl0.readString();
      streamMessageImpl0.setReadOnly(true);
  }

  @Test
  public void test29()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.clearBody();
      assertEquals("StreamMessage", streamMessageImpl0.getJMSType());
  }

  @Test
  public void test30()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.setReadOnly(true);
      assertEquals(true, streamMessageImpl0.getReadOnly());
      
      streamMessageImpl0.clearBody();
      assertEquals(false, streamMessageImpl0.getReadOnly());
  }

  @Test
  public void test31()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.writeLong(0L);
      streamMessageImpl0.clearBody();
      assertEquals("StreamMessage", streamMessageImpl0.getJMSType());
  }

  @Test
  public void test32()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.setReadOnly(false);
      assertEquals("StreamMessage", streamMessageImpl0.getJMSType());
      assertEquals(false, streamMessageImpl0.getReadOnly());
  }

  @Test
  public void test33()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.writeBoolean(true);
      streamMessageImpl0.setReadOnly(true);
      streamMessageImpl0.readBoolean();
  }

  @Test
  public void test34()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.writeLong(0L);
      streamMessageImpl0.reset();
      assertEquals(0L, streamMessageImpl0.readLong());
      
      streamMessageImpl0.readString();
  }

  @Test
  public void test35()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.writeDouble(1428.823746690294);
      streamMessageImpl0.reset();
      assertEquals(1428.823746690294, streamMessageImpl0.readDouble(), 0.01D);
      
      streamMessageImpl0.readString();
  }

  @Test
  public void test36()  throws Throwable  {
      StreamMessageImpl streamMessageImpl0 = new StreamMessageImpl();
      streamMessageImpl0.writeBoolean(false);
      streamMessageImpl0.setReadOnly(true);
      streamMessageImpl0.readBoolean();
  }
}
