/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.service;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.exolab.jms.service.ServiceAlreadyExistsException;
import org.exolab.jms.service.ServiceDoesNotExistException;
import org.exolab.jms.service.ServiceException;
import org.exolab.jms.service.ServiceManager;
import org.exolab.jms.service.Serviceable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestServiceManager {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ServiceManager serviceManager0 = new ServiceManager();
      Class<?> class0 = ServiceManager.class;
      serviceManager0.addService(class0);
      serviceManager0.doStart();
      serviceManager0.doStop();
      assertEquals("Service:[name=nullstarted=false]", serviceManager0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ServiceManager serviceManager0 = new ServiceManager();
      serviceManager0.addService((Object) "Service:[name=nullstarted=false]");
      assertNull(serviceManager0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      ServiceManager serviceManager0 = new ServiceManager();
      // Undeclared exception!
      try {
        serviceManager0.addService((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'service' is null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ServiceManager serviceManager0 = new ServiceManager();
      serviceManager0.doStop();
      assertNull(serviceManager0.getName());
  }

  @Test
  public void test4()  throws Throwable  {
      ServiceManager serviceManager0 = new ServiceManager();
      Class<?> class0 = ServiceManager.class;
      try {
        serviceManager0.getService(class0);
        fail("Expecting exception: ServiceDoesNotExistException");
      } catch(ServiceDoesNotExistException e) {
        /*
         * Service of type org.exolab.jms.service.ServiceManager not registered
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ServiceManager serviceManager0 = new ServiceManager();
      Class<?> class0 = Serviceable.class;
      serviceManager0.addService(class0);
      try {
        serviceManager0.doStart();
        fail("Expecting exception: ServiceException");
      } catch(ServiceException e) {
        /*
         * Multiple services match service type org.exolab.jms.service.Serviceable
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<Class<Integer>> linkedList0 = new LinkedList<Class<Integer>>();
      Class<?> class0 = ServiceManager.class;
      linkedList0.add(class0);
      ServiceManager serviceManager0 = new ServiceManager();
      try {
        serviceManager0.createService((Class) class0, (LinkedList) linkedList0, (List) linkedList0);
        fail("Expecting exception: ServiceException");
      } catch(ServiceException e) {
        /*
         * Circular dependency trying to construct org.exolab.jms.service.ServiceManager: [class org.exolab.jms.service.ServiceManager]
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ServiceManager serviceManager0 = new ServiceManager();
      Class<?> class0 = LinkedList.class;
      LinkedList<Serviceable> linkedList0 = new LinkedList<Serviceable>();
      try {
        serviceManager0.createService((Class) class0, (LinkedList) linkedList0, (List) linkedList0);
        fail("Expecting exception: ServiceException");
      } catch(ServiceException e) {
        /*
         * Cannot create service of type java.util.LinkedList: multiple public constructors
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ServiceManager serviceManager0 = new ServiceManager();
      Class<?> class0 = Class.class;
      LinkedList<Class<Serviceable>> linkedList0 = new LinkedList<Class<Serviceable>>();
      try {
        serviceManager0.createService((Class) class0, (LinkedList) linkedList0, (List) linkedList0);
        fail("Expecting exception: ServiceException");
      } catch(ServiceException e) {
        /*
         * Cannot create service of type java.lang.Class: no public constructor
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ServiceManager serviceManager0 = new ServiceManager();
      Class<?> class0 = ServiceManager.class;
      serviceManager0.addService(class0);
      serviceManager0.doStart();
      try {
        serviceManager0.checkExists(class0);
        fail("Expecting exception: ServiceAlreadyExistsException");
      } catch(ServiceAlreadyExistsException e) {
        /*
         * Service of type class org.exolab.jms.service.ServiceManager already registered
         */
      }
  }
}
