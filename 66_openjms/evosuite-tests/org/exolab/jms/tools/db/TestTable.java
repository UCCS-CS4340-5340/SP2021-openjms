/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.tools.db;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import java.io.Writer;
import java.util.Enumeration;
import org.exolab.castor.util.NestedIOException;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.tools.db.Attribute;
import org.exolab.jms.tools.db.Index;
import org.exolab.jms.tools.db.PrimaryKey;
import org.exolab.jms.tools.db.Table;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;
import org.xml.sax.helpers.XMLFilterImpl;

@RunWith(EvoSuiteRunner.class)
public class TestTable {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Table table0 = new Table();
      Enumeration<Object> enumeration0 = table0.enumerateIndex();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test1()  throws Throwable  {
      Table table0 = new Table();
      PrimaryKey primaryKey0 = new PrimaryKey();
      table0.setPrimaryKey(primaryKey0);
      assertNull(table0.getName());
  }

  @Test
  public void test2()  throws Throwable  {
      Table table0 = new Table();
      Index index0 = new Index();
      try {
        table0.addIndex(2763, index0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 2763, Size: 0
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Table table0 = new Table();
      int int0 = table0.getAttributeCount();
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      Table table0 = new Table();
      boolean boolean0 = table0.isValid();
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Table table0 = new Table();
      int int0 = table0.getIndexCount();
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      Table table0 = new Table();
      Index index0 = new Index();
      table0.addIndex(index0);
      assertEquals(1, table0.getIndexCount());
  }

  @Test
  public void test7()  throws Throwable  {
      Table table0 = new Table();
      table0.clearAttribute();
      assertEquals(0, table0.getAttributeCount());
  }

  @Test
  public void test8()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(959);
      try {
        Table.unmarshal((Reader) pipedReader0);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Table table0 = new Table();
      table0.setName("JCys:");
      assertEquals(true, table0.isValid());
  }

  @Test
  public void test10()  throws Throwable  {
      Table table0 = new Table();
      // Undeclared exception!
      try {
        table0.marshal((Writer) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'out' is null.
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Table table0 = new Table();
      table0.addAttribute((Attribute) null);
      assertEquals(1, table0.getAttributeCount());
  }

  @Test
  public void test12()  throws Throwable  {
      Table table0 = new Table();
      table0.clearIndex();
      assertEquals(0, table0.getIndexCount());
  }

  @Test
  public void test13()  throws Throwable  {
      Table table0 = new Table();
      Index index0 = new Index();
      boolean boolean0 = table0.removeIndex(index0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Table table0 = new Table();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      try {
        table0.marshal((ContentHandler) xMLFilterImpl0);
        fail("Expecting exception: NestedIOException");
      } catch(NestedIOException e) {
        /*
         * System property org.xml.sax.parser not specified
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Table table0 = new Table();
      Attribute attribute0 = new Attribute();
      try {
        table0.addAttribute(1, attribute0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1, Size: 0
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Table table0 = new Table();
      Enumeration<Object> enumeration0 = table0.enumerateAttribute();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test17()  throws Throwable  {
      Table table0 = new Table();
      Attribute attribute0 = new Attribute();
      boolean boolean0 = table0.removeAttribute(attribute0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      Table table0 = new Table();
      try {
        table0.getAttribute((-1003));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Table table0 = new Table();
      try {
        table0.getAttribute(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Table table0 = new Table();
      try {
        table0.getAttribute(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Table table0 = new Table();
      Attribute[] attributeArray0 = new Attribute[1];
      table0.setAttribute(attributeArray0);
      boolean boolean0 = table0.isValid();
      assertEquals(1, table0.getAttributeCount());
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Table table0 = new Table();
      try {
        table0.getIndex((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Table table0 = new Table();
      try {
        table0.getIndex(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Table table0 = new Table();
      try {
        table0.getIndex(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Table table0 = new Table();
      Index[] indexArray0 = new Index[7];
      table0.setIndex(indexArray0);
      table0.getIndex();
      assertEquals(7, table0.getIndexCount());
  }

  @Test
  public void test26()  throws Throwable  {
      Table table0 = new Table();
      try {
        table0.setAttribute((-542), (Attribute) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Table table0 = new Table();
      Attribute attribute0 = new Attribute();
      try {
        table0.setAttribute(0, attribute0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      Table table0 = new Table();
      Attribute attribute0 = new Attribute();
      try {
        table0.setAttribute(118, attribute0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test29()  throws Throwable  {
      Table table0 = new Table();
      Index index0 = new Index();
      try {
        table0.setIndex((-638), index0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test30()  throws Throwable  {
      Table table0 = new Table();
      try {
        table0.setIndex(12449, (Index) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Table table0 = new Table();
      Index index0 = new Index();
      try {
        table0.setIndex(0, index0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }
}
