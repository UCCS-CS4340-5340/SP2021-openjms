/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.tools.db;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.Reader;
import java.io.Writer;
import java.util.Enumeration;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.tools.db.Column;
import org.exolab.jms.tools.db.PrimaryKey;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;

@RunWith(EvoSuiteRunner.class)
public class TestPrimaryKey {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      boolean boolean0 = primaryKey0.isValid();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      // Undeclared exception!
      try {
        primaryKey0.marshal((ContentHandler) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'handler' is null.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) pipedReader0);
      try {
        PrimaryKey.unmarshal((Reader) lineNumberReader0);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      Enumeration<Object> enumeration0 = primaryKey0.enumerateColumn();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test4()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      Column column0 = new Column();
      primaryKey0.addColumn(column0);
      primaryKey0.getColumn();
      assertEquals(1, primaryKey0.getColumnCount());
      assertEquals(true, primaryKey0.isValid());
  }

  @Test
  public void test5()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      try {
        primaryKey0.marshal((Writer) charArrayWriter0);
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * A minimum of 1 column object(s) are required.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      primaryKey0.clearColumn();
      assertEquals(0, primaryKey0.getColumnCount());
  }

  @Test
  public void test7()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      boolean boolean0 = primaryKey0.removeColumn((Column) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      int int0 = primaryKey0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      Column column0 = new Column();
      primaryKey0.addColumn(0, column0);
      assertEquals(1, primaryKey0.getColumnCount());
      assertEquals(true, primaryKey0.isValid());
  }

  @Test
  public void test10()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      try {
        primaryKey0.getColumn((-1485));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      try {
        primaryKey0.getColumn(1771);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      try {
        primaryKey0.getColumn(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      Column column0 = new Column();
      try {
        primaryKey0.setColumn(1481, column0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      Column column0 = new Column();
      try {
        primaryKey0.setColumn(0, column0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 0, Size: 0
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      PrimaryKey primaryKey0 = new PrimaryKey();
      Column[] columnArray0 = new Column[1];
      primaryKey0.setColumn(columnArray0);
      assertEquals(1, primaryKey0.getColumnCount());
  }
}
