/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.client;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import javax.naming.Reference;
import org.exolab.jms.client.JmsDestination;
import org.exolab.jms.client.JmsQueue;
import org.exolab.jms.client.JmsTemporaryTopic;
import org.exolab.jms.client.JmsTopic;
import org.exolab.jms.message.DestinationImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestJmsDestination {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JmsTopic jmsTopic0 = new JmsTopic("Cannt per");
      Reference reference0 = jmsTopic0.getReference();
      assertEquals("Reference Class Name: org.exolab.jms.client.JmsTopic\nType: name\nContent: Cannt per\nType: persistent\nContent: false\n", reference0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue("tempqueue:org.apache.log4j.Priority");
      String string0 = jmsQueue0.toString();
      assertEquals("tempqueue:org.apache.log4j.Priority-false", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      JmsTopic jmsTopic0 = new JmsTopic("Cannt per");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(118);
      PrintStream printStream0 = new PrintStream((OutputStream) byteArrayOutputStream0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      jmsTopic0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals(false, jmsTopic0.getPersistent());
      assertEquals("Cannt per-false", jmsTopic0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      JmsTemporaryTopic jmsTemporaryTopic0 = new JmsTemporaryTopic();
      assertEquals(false, jmsTemporaryTopic0.getPersistent());
      
      jmsTemporaryTopic0.setPersistent(true);
      assertEquals(true, jmsTemporaryTopic0.getPersistent());
      assertEquals("null-true", jmsTemporaryTopic0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue("tempqueue:org.apache.log4j.Priority");
      boolean boolean0 = jmsQueue0.isTemporaryDestination();
      assertEquals(true, boolean0);
      assertEquals("tempqueue:org.apache.log4j.Priority-false", jmsQueue0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      JmsTopic jmsTopic0 = new JmsTopic("Cannt per");
      boolean boolean0 = jmsTopic0.isTemporaryDestination();
      assertEquals(false, jmsTopic0.getPersistent());
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      JmsTopic jmsTopic0 = new JmsTopic("temptopic:Cannt per");
      boolean boolean0 = jmsTopic0.isTemporaryDestination();
      assertEquals(false, jmsTopic0.getPersistent());
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue("tempqueue:org.apache.log4j.Priority");
      boolean boolean0 = JmsDestination.isTemporaryDestination((DestinationImpl) jmsQueue0);
      assertEquals(true, boolean0);
      assertEquals(false, jmsQueue0.getPersistent());
  }

  @Test
  public void test8()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue("Cannt per");
      boolean boolean0 = JmsDestination.isTemporaryDestination((DestinationImpl) jmsQueue0);
      assertEquals(false, boolean0);
      assertEquals(false, jmsQueue0.getPersistent());
  }

  @Test
  public void test9()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue("temptopic:Cannt per");
      boolean boolean0 = JmsDestination.isTemporaryDestination((DestinationImpl) jmsQueue0);
      assertEquals(true, boolean0);
      assertEquals(false, jmsQueue0.getPersistent());
  }
}
