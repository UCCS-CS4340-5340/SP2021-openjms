/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.common.uuid;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.exolab.jms.common.uuid.UUIDGenerator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestUUIDGenerator {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      try {
        UUIDGenerator.toBytes("Category ");
        fail("Expecting exception: UUIDGenerator.InvalidIDException");
      } catch(UUIDGenerator.InvalidIDException e) {
        /*
         * character t encountered, expected hexadecimal digit in identifier Category 
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      UUIDGenerator uUIDGenerator0 = new UUIDGenerator();
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        UUIDGenerator.create((String) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'prefix' is null
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = UUIDGenerator.toBytes("&c:", "&c:");
      assertNotNull(byteArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      try {
        UUIDGenerator.toBytes("'VjLui+j?5zw~59");
        fail("Expecting exception: UUIDGenerator.InvalidIDException");
      } catch(UUIDGenerator.InvalidIDException e) {
        /*
         * character ' encountered, expected hexadecimal digit in identifier 'VjLui+j?5zw~59
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      try {
        UUIDGenerator.toBytes("1");
        fail("Expecting exception: UUIDGenerator.InvalidIDException");
      } catch(UUIDGenerator.InvalidIDException e) {
        /*
         * Invalid identifier: odd number of hexadecimal digits in identifier 1
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      // Undeclared exception!
      try {
        UUIDGenerator.fromBytes((String) null, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument prefix is null
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      String string0 = UUIDGenerator.fromBytes(byteArray0);
      assertEquals("00000000000000000000000000000000000000", string0);
      assertNotNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = UUIDGenerator.isLocal(byteArray0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        UUIDGenerator.isLocal((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument uuid is null
         */
      }
  }
}
