/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.net.uri;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.exolab.jms.common.security.BasicPrincipal;
import org.exolab.jms.net.uri.InvalidURIException;
import org.exolab.jms.net.uri.URI;
import org.exolab.jms.net.uri.URIHelper;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestURIHelper {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      try {
        URIHelper.parse("x:", "x:");
        fail("Expecting exception: InvalidURIException");
      } catch(InvalidURIException e) {
        /*
         * Invalid scheme: x
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          URI uRI0 = URIHelper.create("W", "W", 58);
          assertNotNull(uRI0);
          
          // Undeclared exception!
          try {
            URIHelper.convertHostToAddress(uRI0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.net.SocketPermission\" \"W\" \"resolve\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1203)
             * java.net.InetAddress.getAllByName(InetAddress.java:1127)
             * java.net.InetAddress.getAllByName(InetAddress.java:1063)
             * java.net.InetAddress.getByName(InetAddress.java:1013)
             * org.exolab.jms.net.uri.URIHelper.convertHostToAddress(URIHelper.java:236)
             * sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Argument base is null and argument uriSpec is null or an empty string", "Argument base is null and argument uriSpec is null or an empty string");
      hashMap0.put((String) null, "Argument base is null and argument uriSpec is null or an empty string");
      try {
        URIHelper.create("Argument base is null and argument uriSpec is null or an empty string", "Argument base is null and argument uriSpec is null or an empty string", (-1574), "Argument base is null and argument uriSpec is null or an empty string", (Map) hashMap0);
        fail("Expecting exception: InvalidURIException");
      } catch(InvalidURIException e) {
        /*
         * The scheme is not conformant.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      URI uRI0 = new URI();
      URI uRI1 = URIHelper.convertHostToAddress(uRI0);
      assertNull(uRI1.getPath());
  }

  @Test
  public void test4()  throws Throwable  {
      URI uRI0 = new URI();
      uRI0.setHost("");
      URI uRI1 = URIHelper.convertHostToAddress(uRI0);
      assertNull(uRI1.getFragment());
  }

  @Test
  public void test5()  throws Throwable  {
      URI uRI0 = new URI();
      BasicPrincipal basicPrincipal0 = URIHelper.getPrincipal(uRI0);
      assertNull(basicPrincipal0);
  }

  @Test
  public void test6()  throws Throwable  {
      URI uRI0 = new URI("E", "E", "E", 1756, "E", "E", "E");
      BasicPrincipal basicPrincipal0 = URIHelper.getPrincipal(uRI0);
      assertEquals("E", basicPrincipal0.getName());
      assertEquals("", basicPrincipal0.getPassword());
      assertNotNull(basicPrincipal0);
  }

  @Test
  public void test7()  throws Throwable  {
      URI uRI0 = new URI("NAzvQ", "NAzvQ", "NAzvQ", 137, "NAzvQ", "NAzvQ", "NAzvQ");
      URI uRI1 = URIHelper.getURISansQuery(uRI0);
      assertNotNull(uRI1);
      assertEquals("//NAzvQ@NAzvQ:137NAzvQ", uRI1.getSchemeSpecificPart());
  }

  @Test
  public void test8()  throws Throwable  {
      URI uRI0 = URIHelper.create("W", "W", 58);
      assertNotNull(uRI0);
      
      URI uRI1 = URIHelper.getURISansQuery(uRI0);
      assertSame(uRI1, uRI0);
      assertEquals("w://W:58/", uRI1.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      URI uRI0 = URIHelper.create("W", "W", 58);
      assertNotNull(uRI0);
      
      uRI0.setFragment("W");
      URI uRI1 = URIHelper.getURISansQuery(uRI0);
      assertEquals("w://W:58/#W", uRI0.toString());
      assertNotSame(uRI1, uRI0);
  }

  @Test
  public void test10()  throws Throwable  {
      Map<Object, Object> map0 = URIHelper.parseQuery("2uf=");
      assertEquals(1, map0.size());
      assertNotNull(map0);
  }

  @Test
  public void test11()  throws Throwable  {
      try {
        URIHelper.parseQuery("NAzvQ");
        fail("Expecting exception: InvalidURIException");
      } catch(InvalidURIException e) {
        /*
         * Invalid query=NAzvQ
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      try {
        URIHelper.parseHostPort("X?:m)I.WJQ", "X?:m)I.WJQ");
        fail("Expecting exception: InvalidURIException");
      } catch(InvalidURIException e) {
        /*
         * Invalid scheme: x
         */
      }
  }
}
