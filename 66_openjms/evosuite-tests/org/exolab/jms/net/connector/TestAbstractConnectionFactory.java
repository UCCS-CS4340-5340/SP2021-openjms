/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.net.connector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.security.Principal;
import java.util.HashMap;
import java.util.Map;
import javax.management.remote.JMXPrincipal;
import org.exolab.jms.net.connector.ConnectionFactory;
import org.exolab.jms.net.connector.ConnectionManager;
import org.exolab.jms.net.connector.ManagedConnectionFactory;
import org.exolab.jms.net.connector.ResourceException;
import org.exolab.jms.net.http.AbstractHTTPConnectionFactory;
import org.exolab.jms.net.http.HTTPSManagedConnectionFactory;
import org.exolab.jms.net.tcp.TCPManagedConnectionFactory;
import org.exolab.jms.net.uri.URI;
import org.exolab.jms.net.util.Properties;
import org.exolab.jms.net.vm.VMManagedConnectionFactory;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestAbstractConnectionFactory {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory0 = new HTTPSManagedConnectionFactory();
      AbstractHTTPConnectionFactory abstractHTTPConnectionFactory0 = new AbstractHTTPConnectionFactory("", "", (ManagedConnectionFactory) hTTPSManagedConnectionFactory0, (ConnectionManager) null);
      URI uRI0 = new URI();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Properties properties0 = new Properties((Map) hashMap0, "");
      Map<Object, Object> map0 = properties0.getProperties();
      // Undeclared exception!
      try {
        abstractHTTPConnectionFactory0.getConnection((Principal) jMXPrincipal0, uRI0, (Map) map0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      AbstractHTTPConnectionFactory abstractHTTPConnectionFactory0 = new AbstractHTTPConnectionFactory((String) null, (String) null, (ManagedConnectionFactory) vMManagedConnectionFactory0, (ConnectionManager) null);
      URI uRI0 = new URI();
      // Undeclared exception!
      try {
        abstractHTTPConnectionFactory0.canConnect(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * StringEquals is not supposed to work on a null caller
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TCPManagedConnectionFactory tCPManagedConnectionFactory0 = new TCPManagedConnectionFactory();
      ConnectionFactory connectionFactory0 = tCPManagedConnectionFactory0.createConnectionFactory((ConnectionManager) null);
      assertNotNull(connectionFactory0);
  }

  @Test
  public void test3()  throws Throwable  {
      TCPManagedConnectionFactory tCPManagedConnectionFactory0 = new TCPManagedConnectionFactory();
      AbstractHTTPConnectionFactory abstractHTTPConnectionFactory0 = new AbstractHTTPConnectionFactory("`Q_RL", "`Q_RL", (ManagedConnectionFactory) tCPManagedConnectionFactory0, (ConnectionManager) null);
      URI uRI0 = new URI();
      boolean boolean0 = abstractHTTPConnectionFactory0.canAccept(uRI0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      AbstractHTTPConnectionFactory abstractHTTPConnectionFactory0 = new AbstractHTTPConnectionFactory((String) null, (String) null, (ManagedConnectionFactory) vMManagedConnectionFactory0, (ConnectionManager) null);
      ConnectionManager connectionManager0 = abstractHTTPConnectionFactory0.getConnectionManager();
      assertNull(connectionManager0);
  }

  @Test
  public void test5()  throws Throwable  {
      HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory0 = new HTTPSManagedConnectionFactory();
      AbstractHTTPConnectionFactory abstractHTTPConnectionFactory0 = new AbstractHTTPConnectionFactory("j", "j", (ManagedConnectionFactory) hTTPSManagedConnectionFactory0, (ConnectionManager) null);
      URI uRI0 = new URI();
      // Undeclared exception!
      try {
        abstractHTTPConnectionFactory0.getConnection((Principal) null, uRI0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      VMManagedConnectionFactory vMManagedConnectionFactory0 = new VMManagedConnectionFactory();
      AbstractHTTPConnectionFactory abstractHTTPConnectionFactory0 = new AbstractHTTPConnectionFactory((String) null, (String) null, (ManagedConnectionFactory) vMManagedConnectionFactory0, (ConnectionManager) null);
      VMManagedConnectionFactory vMManagedConnectionFactory1 = (VMManagedConnectionFactory)abstractHTTPConnectionFactory0.getManagedConnectionFactory();
      assertSame(vMManagedConnectionFactory0, vMManagedConnectionFactory1);
  }

  @Test
  public void test7()  throws Throwable  {
      TCPManagedConnectionFactory tCPManagedConnectionFactory0 = new TCPManagedConnectionFactory();
      AbstractHTTPConnectionFactory abstractHTTPConnectionFactory0 = new AbstractHTTPConnectionFactory("`Q_RL", "`Q_RL", (ManagedConnectionFactory) tCPManagedConnectionFactory0, (ConnectionManager) null);
      URI uRI0 = new URI();
      // Undeclared exception!
      try {
        abstractHTTPConnectionFactory0.accept(uRI0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
