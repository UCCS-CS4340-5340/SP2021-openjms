/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.net.http;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sun.net.ssl.internal.www.protocol.https.Handler;
import com.sun.net.ssl.internal.www.protocol.https.HttpsURLConnectionOldImpl;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.exolab.jms.net.connector.ResourceException;
import org.exolab.jms.net.http.HTTPRequestInfo;
import org.exolab.jms.net.http.TunnelHelper;
import org.exolab.jms.net.uri.URI;
import org.exolab.jms.net.util.Properties;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestTunnelHelper {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TunnelHelper tunnelHelper0 = new TunnelHelper();
      assertNotNull(tunnelHelper0);
  }

  @Test
  public void test1()  throws Throwable  {
      Handler handler0 = new Handler("E", 3);
      URL uRL0 = new URL("E", "E", 3, "E", (URLStreamHandler) handler0);
      URI uRI0 = new URI();
      Properties properties0 = new Properties("E");
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0, properties0);
      HttpsURLConnectionOldImpl httpsURLConnectionOldImpl0 = (HttpsURLConnectionOldImpl)TunnelHelper.create(uRL0, (String) null, (String) null, hTTPRequestInfo0);
      assertEquals("POST", httpsURLConnectionOldImpl0.getRequestMethod());
      assertNotNull(httpsURLConnectionOldImpl0);
      assertEquals(false, httpsURLConnectionOldImpl0.getUseCaches());
  }

  @Test
  public void test2()  throws Throwable  {
      Handler handler0 = new Handler("E", 3);
      URL uRL0 = new URL("E", "E", 3, "E", (URLStreamHandler) handler0);
      URI uRI0 = new URI();
      Properties properties0 = new Properties("E");
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0, properties0);
      HttpsURLConnectionOldImpl httpsURLConnectionOldImpl0 = (HttpsURLConnectionOldImpl)TunnelHelper.create(uRL0, "E", "E", hTTPRequestInfo0);
      assertEquals(false, httpsURLConnectionOldImpl0.getUseCaches());
      assertNotNull(httpsURLConnectionOldImpl0);
      assertEquals("POST", httpsURLConnectionOldImpl0.getRequestMethod());
  }

  @Test
  public void test3()  throws Throwable  {
      Handler handler0 = new Handler("E", 3);
      URL uRL0 = new URL("E", "E", 3, "E", (URLStreamHandler) handler0);
      URI uRI0 = new URI();
      Properties properties0 = new Properties("E");
      HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0, properties0);
      hTTPRequestInfo0.setProxyUser("E");
      HttpsURLConnectionOldImpl httpsURLConnectionOldImpl0 = (HttpsURLConnectionOldImpl)TunnelHelper.create(uRL0, "E", "E", hTTPRequestInfo0);
      assertEquals("POST", httpsURLConnectionOldImpl0.getRequestMethod());
      assertEquals(false, httpsURLConnectionOldImpl0.getUseCaches());
      assertNotNull(httpsURLConnectionOldImpl0);
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          Handler handler0 = new Handler("E", 3);
          URL uRL0 = new URL("E", "E", 3, "E", (URLStreamHandler) handler0);
          URI uRI0 = new URI();
          Properties properties0 = new Properties("E");
          HTTPRequestInfo hTTPRequestInfo0 = new HTTPRequestInfo(uRI0, properties0);
          hTTPRequestInfo0.setProxyUser("E");
          hTTPRequestInfo0.setProxyPassword("E");
          // Undeclared exception!
          try {
            TunnelHelper.connect(uRL0, "E", "E", hTTPRequestInfo0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.net.SocketPermission\" \"E:3\" \"connect,resolve\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             * sun.net.www.http.HttpClient.openServer(HttpClient.java:466)
             * sun.net.www.protocol.https.HttpsClient.<init>(HttpsClient.java:278)
             * sun.net.www.protocol.https.HttpsClient.New(HttpsClient.java:335)
             * sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.getNewHttpClient(AbstractDelegateHttpsURLConnection.java:191)
             * sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:928)
             * sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:177)
             * com.sun.net.ssl.internal.www.protocol.https.HttpsURLConnectionOldImpl.connect(HttpsURLConnectionOldImpl.java:142)
             * org.exolab.jms.net.http.TunnelHelper.connect(TunnelHelper.java:114)
             * sun.reflect.GeneratedMethodAccessor143.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
