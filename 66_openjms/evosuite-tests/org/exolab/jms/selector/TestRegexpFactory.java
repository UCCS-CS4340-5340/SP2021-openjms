/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.selector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.apache.oro.text.regex.Perl5Pattern;
import org.exolab.jms.selector.InvalidRegexpException;
import org.exolab.jms.selector.RegexpFactory;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestRegexpFactory {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Character character0 = Character.valueOf(' ');
      Perl5Pattern perl5Pattern0 = (Perl5Pattern)RegexpFactory.create("P}9$D-.A2&AFn", character0);
      assertNotNull(perl5Pattern0);
      assertEquals("^P\\}9\\$D-\\.A2&AFn$", perl5Pattern0.getPattern());
  }

  @Test
  public void test1()  throws Throwable  {
      Perl5Pattern perl5Pattern0 = (Perl5Pattern)RegexpFactory.create("?~]2Z", (Character) null);
      assertEquals("^\\?~\\]2Z$", perl5Pattern0.getPattern());
      assertNotNull(perl5Pattern0);
  }

  @Test
  public void test2()  throws Throwable  {
      Character character0 = Character.valueOf(' ');
      try {
        RegexpFactory.create("Invalid regular expression: ", character0);
        fail("Expecting exception: Exception");
      } catch(Exception e) {
        /*
         * Invalid regular expression: Invalid regular expression: 
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Character character0 = Character.valueOf('^');
      Perl5Pattern perl5Pattern0 = (Perl5Pattern)RegexpFactory.create("sH.>)c[ ( O8z_@^%O", character0);
      assertNotNull(perl5Pattern0);
      assertEquals("^sH\\.>\\)c\\[ \\( O8z.@%O$", perl5Pattern0.getPattern());
  }

  @Test
  public void test4()  throws Throwable  {
      Character character0 = Character.valueOf('^');
      Perl5Pattern perl5Pattern0 = (Perl5Pattern)RegexpFactory.create("Z@4(D9+%", character0);
      assertEquals(0, perl5Pattern0.getOptions());
  }

  @Test
  public void test5()  throws Throwable  {
      Character character0 = new Character('@');
      Perl5Pattern perl5Pattern0 = (Perl5Pattern)RegexpFactory.create("sH.>)c[ ( O8z_@^%O", character0);
      assertNotNull(perl5Pattern0);
      assertEquals("^sH\\.>\\)c\\[ \\( O8z.\\^.*O$", perl5Pattern0.getPattern());
  }

  @Test
  public void test6()  throws Throwable  {
      Perl5Pattern perl5Pattern0 = (Perl5Pattern)RegexpFactory.create("hi|)G7>\"9{xii`", (Character) '3');
      assertNotNull(perl5Pattern0);
      assertEquals("^hi\\|\\)G7>\"9\\{xii`$", perl5Pattern0.getPattern());
  }

  @Test
  public void test7()  throws Throwable  {
      Perl5Pattern perl5Pattern0 = (Perl5Pattern)RegexpFactory.create("%;(ix'8uTa7@BYJ|,6_", (Character) '6');
      assertNotNull(perl5Pattern0);
      assertEquals("^.*;\\(ix'8uTa7@BYJ\\|,_$", perl5Pattern0.getPattern());
  }
}
