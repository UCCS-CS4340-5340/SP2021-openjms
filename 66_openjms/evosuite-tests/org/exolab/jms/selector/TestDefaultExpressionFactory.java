/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.selector;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashSet;
import org.exolab.jms.selector.DefaultExpressionFactory;
import org.exolab.jms.selector.Expression;
import org.exolab.jms.selector.SelectorException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestDefaultExpressionFactory {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.between((Expression) null, (Expression) null, (Expression) null);
      Expression expression1 = defaultExpressionFactory0.binaryOperator(9, expression0, expression0);
      assertNotSame(expression0, expression1);
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("[F");
      Expression expression1 = defaultExpressionFactory0.like(expression0, "[F", "H");
      assertEquals("([F like '[F' escape 'H')", expression1.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      HashSet<String> hashSet0 = new HashSet<String>();
      Expression expression0 = defaultExpressionFactory0.in((Expression) null, (HashSet) hashSet0);
      assertNotNull(expression0);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("\"VG4b|B3jT#CrlK 9{,");
      Expression expression1 = defaultExpressionFactory0.isNull(expression0);
      assertNotSame(expression0, expression1);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("[F");
      try {
        defaultExpressionFactory0.binaryOperator(7, expression0, expression0);
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * Unknown binary operator type: 7
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.literal(31, "");
      assertNotNull(expression0);
      
      Expression expression1 = defaultExpressionFactory0.binaryOperator(11, expression0, expression0);
      assertNotNull(expression1);
      assertEquals("(false > false)", expression1.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("\"VG4b|B3jT#CrlK 9{,");
      Expression expression1 = defaultExpressionFactory0.binaryOperator(12, expression0, expression0);
      assertNotNull(expression1);
      assertEquals("(\"VG4b|B3jT#CrlK 9{, <= \"VG4b|B3jT#CrlK 9{,)", expression1.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("s~@)0QcrLz;\"xaE0?");
      Expression expression1 = defaultExpressionFactory0.binaryOperator(13, expression0, expression0);
      assertNotNull(expression1);
      assertEquals("(s~@)0QcrLz;\"xaE0? >= s~@)0QcrLz;\"xaE0?)", expression1.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.binaryOperator(14, (Expression) null, (Expression) null);
      assertNotNull(expression0);
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.binaryOperator(15, (Expression) null, (Expression) null);
      assertNotNull(expression0);
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.literal(32, "oropperator");
      assertNotNull(expression0);
      
      Expression expression1 = defaultExpressionFactory0.binaryOperator(16, expression0, expression0);
      assertNotNull(expression1);
      assertEquals("(true * true)", expression1.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("ct1^j");
      Expression expression1 = defaultExpressionFactory0.binaryOperator(17, expression0, expression0);
      assertNotNull(expression1);
      assertEquals("(ct1^j / ct1^j)", expression1.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("Qy");
      try {
        defaultExpressionFactory0.binaryOperator(4, expression0, expression0);
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * Unknown binary operator type: 4
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("Qy");
      Expression expression1 = defaultExpressionFactory0.unaryOperator(4, expression0);
      assertEquals("(- Qy)", expression1.toString());
      assertNotNull(expression1);
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("[F");
      Expression expression1 = defaultExpressionFactory0.unaryOperator(7, expression0);
      assertEquals("(not [F)", expression1.toString());
      assertNotNull(expression1);
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.identifier("s~@)0QcrLz;\"xaE0?");
      try {
        defaultExpressionFactory0.unaryOperator(13, expression0);
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * Unknown unary operator type: 13
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      Expression expression0 = defaultExpressionFactory0.literal(26, "|)+v}St}NC");
      assertEquals("'|)+v}St}NC'", expression0.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      try {
        defaultExpressionFactory0.literal(27, "");
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * Unknown literal type: 27
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      try {
        defaultExpressionFactory0.literal(28, (String) null);
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * Unknown literal type: 28
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      try {
        defaultExpressionFactory0.literal(29, ".&Xo");
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * invalid integer: .&Xo
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      try {
        defaultExpressionFactory0.literal(30, "punct");
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * invalid float: punct
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      DefaultExpressionFactory defaultExpressionFactory0 = new DefaultExpressionFactory();
      try {
        defaultExpressionFactory0.literal(17, "ct1^j");
        fail("Expecting exception: SelectorException");
      } catch(SelectorException e) {
        /*
         * Unknown literal type: 17
         */
      }
  }
}
