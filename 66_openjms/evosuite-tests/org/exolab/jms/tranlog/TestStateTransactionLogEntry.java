/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.tranlog;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.exolab.jms.tranlog.ExternalXid;
import org.exolab.jms.tranlog.StateTransactionLogEntry;
import org.exolab.jms.tranlog.TransactionState;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestStateTransactionLogEntry {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry();
      stateTransactionLogEntry0.setState((TransactionState) null);
      assertEquals(false, stateTransactionLogEntry0.transactionExpired());
  }

  @Test
  public void test1()  throws Throwable  {
      ExternalXid externalXid0 = new ExternalXid();
      StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry(externalXid0, ")_d2}Kt4/C");
      assertEquals(")_d2}Kt4/C", stateTransactionLogEntry0.getResourceId());
  }

  @Test
  public void test2()  throws Throwable  {
      StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry();
      TransactionState transactionState0 = stateTransactionLogEntry0.getState();
      assertNull(transactionState0);
  }

  @Test
  public void test3()  throws Throwable  {
      StateTransactionLogEntry stateTransactionLogEntry0 = new StateTransactionLogEntry();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(9);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      try {
        stateTransactionLogEntry0.writeExternal((ObjectOutput) objectOutputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * writeExternal : entry has invalid state
         */
      }
  }
}
