/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.tranlog;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import javax.transaction.xa.Xid;
import org.exolab.jms.tranlog.ExternalXid;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestExternalXid {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ExternalXid externalXid0 = new ExternalXid();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) bufferedOutputStream0);
      // Undeclared exception!
      try {
        externalXid0.writeExternal((ObjectOutput) objectOutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ExternalXid externalXid0 = new ExternalXid();
      ExternalXid externalXid1 = new ExternalXid((Xid) externalXid0);
      assertNotNull(externalXid1);
      
      ExternalXid externalXid2 = new ExternalXid((Xid) externalXid1);
      assertEquals("xid://00000000--", externalXid2.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ExternalXid externalXid0 = new ExternalXid(1344, byteArray0, byteArray0);
      assertNotNull(externalXid0);
      
      boolean boolean0 = externalXid0.equals((Object) "");
      assertEquals(false, boolean0);
      assertEquals("xid://00000540-00000000000000000000000000-00000000000000000000000000", externalXid0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      ExternalXid externalXid0 = new ExternalXid();
      externalXid0.hashCode();
      String string0 = externalXid0.toString();
      assertEquals("xid://00000000--", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      ExternalXid externalXid0 = new ExternalXid();
      ExternalXid externalXid1 = new ExternalXid((Xid) externalXid0);
      assertNotNull(externalXid1);
      
      int int0 = externalXid1.hashCode();
      assertEquals((-269739001), int0);
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ExternalXid externalXid0 = new ExternalXid((-1696), byteArray0, byteArray0);
      assertNotNull(externalXid0);
      
      int int0 = externalXid0.hashCode();
      assertEquals(1900221844, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      ExternalXid externalXid0 = new ExternalXid();
      ExternalXid externalXid1 = new ExternalXid((Xid) externalXid0);
      assertNotNull(externalXid1);
      
      // Undeclared exception!
      try {
        externalXid0.equals((Object) externalXid1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ExternalXid externalXid0 = new ExternalXid();
      ExternalXid externalXid1 = new ExternalXid((-1369), byteArray0, byteArray0);
      assertNotNull(externalXid1);
      
      boolean boolean0 = externalXid0.equals((Object) externalXid1);
      assertEquals(false, boolean0);
      assertEquals("xid://fffffaa7-00000000000000000000000000000000000000000000-00000000000000000000000000000000000000000000", externalXid1.toString());
      assertEquals(-1369, externalXid1.getFormatId());
  }

  @Test
  public void test8()  throws Throwable  {
      ExternalXid externalXid0 = new ExternalXid();
      ExternalXid externalXid1 = new ExternalXid((Xid) externalXid0);
      assertNotNull(externalXid1);
      
      boolean boolean0 = externalXid1.equals((Object) externalXid0);
      assertEquals("xid://00000000--", externalXid1.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ExternalXid externalXid0 = new ExternalXid(1344, byteArray0, byteArray0);
      assertNotNull(externalXid0);
      
      ExternalXid externalXid1 = new ExternalXid((Xid) externalXid0);
      boolean boolean0 = externalXid0.equals((Object) externalXid1);
      assertEquals(1344, externalXid0.getFormatId());
      assertEquals(true, boolean0);
  }
}
