/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.tranlog;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.exolab.jms.tranlog.ExternalXid;
import org.exolab.jms.tranlog.TransactionLog;
import org.exolab.jms.tranlog.TransactionLogException;
import org.exolab.jms.tranlog.TransactionState;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestTransactionLog {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      TransactionLog transactionLog0 = new TransactionLog("/", false);
      try {
        transactionLog0.recover();
        fail("Expecting exception: TransactionLogException");
      } catch(TransactionLogException e) {
        /*
         * Error in recover java.io.FileNotFoundException: / (Is a directory)
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TransactionLog transactionLog0 = new TransactionLog("/", false);
          try {
            transactionLog0.logTransactionState((ExternalXid) null, 16L, "/", (TransactionState) null);
            fail("Expecting exception: TransactionLogException");
          } catch(TransactionLogException e) {
            /*
             * Error in logTransactionState java.lang.SecurityException: Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             * org.exolab.jms.tranlog.TransactionLog.getOutputStream(TransactionLog.java:329)
             * org.exolab.jms.tranlog.TransactionLog.logTransactionState(TransactionLog.java:177)
             * sun.reflect.GeneratedMethodAccessor71.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      TransactionLog transactionLog0 = new TransactionLog(".", false);
      String string0 = transactionLog0.getName();
      assertEquals(".", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      TransactionLog transactionLog0 = new TransactionLog(".", false);
      assertNotNull(transactionLog0);
      
      long long0 = transactionLog0.size();
      assertEquals(4096L, long0);
  }

  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TransactionLog transactionLog0 = new TransactionLog("/", false);
          try {
            transactionLog0.logTransactionData((ExternalXid) null, 350L, "/", (Object) "");
            fail("Expecting exception: TransactionLogException");
          } catch(TransactionLogException e) {
            /*
             * Error in logTransactionData java.lang.SecurityException: Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:136)
             * org.exolab.jms.tranlog.TransactionLog.getOutputStream(TransactionLog.java:329)
             * org.exolab.jms.tranlog.TransactionLog.logTransactionData(TransactionLog.java:209)
             * sun.reflect.GeneratedMethodAccessor72.invoke(Unknown Source)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test5()  throws Throwable  {
      TransactionLog transactionLog0 = null;
      try {
        transactionLog0 = new TransactionLog((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Can't specify a null or empty name
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TransactionLog transactionLog0 = null;
      try {
        transactionLog0 = new TransactionLog("", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Can't specify a null or empty name
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TransactionLog transactionLog0 = null;
      try {
        transactionLog0 = new TransactionLog(".", true);
        fail("Expecting exception: TransactionLogException");
      } catch(TransactionLogException e) {
        /*
         * . already exists
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          TransactionLog transactionLog0 = null;
          try {
            transactionLog0 = new TransactionLog("~JT2Z", true);
            fail("Expecting exception: TransactionLogException");
          } catch(TransactionLogException e) {
            /*
             * Failed to create the log file ~JT2Z b/cjava.lang.SecurityException: Security manager blocks (\"java.io.FilePermission\" \"~JT2Z\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             * org.exolab.jms.tranlog.TransactionLog.<init>(TransactionLog.java:129)
             * sun.reflect.GeneratedConstructorAccessor31.newInstance(Unknown Source)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:525)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test9()  throws Throwable  {
      TransactionLog transactionLog0 = null;
      try {
        transactionLog0 = new TransactionLog("4k$x@OsP`eeS{,c9KC", false);
        fail("Expecting exception: TransactionLogException");
      } catch(TransactionLogException e) {
        /*
         * 4k$x@OsP`eeS{,c9KC does not exists
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      TransactionLog transactionLog0 = new TransactionLog(".", false);
      transactionLog0.close();
      assertEquals(false, transactionLog0.canGarbageCollect());
  }

  @Test
  public void test11()  throws Throwable  {
      TransactionLog transactionLog0 = new TransactionLog("/", false);
      assertNotNull(transactionLog0);
      
      boolean boolean0 = transactionLog0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      TransactionLog transactionLog0 = new TransactionLog("/", false);
      assertNotNull(transactionLog0);
      
      boolean boolean0 = transactionLog0.equals((Object) transactionLog0);
      assertEquals(true, boolean0);
  }
}
