/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.persistence;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import org.apache.commons.dbcp.DelegatingConnection;
import org.apache.commons.dbcp.PoolingConnection;
import org.apache.derby.diag.ErrorLogReader;
import org.exolab.jms.persistence.SQLHelper;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestSQLHelper {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SQLHelper sQLHelper0 = new SQLHelper();
      assertNotNull(sQLHelper0);
  }

  @Test
  public void test1()  throws Throwable  {
      boolean boolean0 = SQLHelper.rollback((Connection) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      PoolingConnection poolingConnection0 = new PoolingConnection((Connection) null);
      // Undeclared exception!
      try {
        SQLHelper.rollback((Connection) poolingConnection0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      boolean boolean0 = SQLHelper.close((Connection) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      DelegatingConnection delegatingConnection0 = new DelegatingConnection((Connection) null);
      // Undeclared exception!
      try {
        SQLHelper.close((Connection) delegatingConnection0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      boolean boolean0 = SQLHelper.close((Statement) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      boolean boolean0 = SQLHelper.close((ResultSet) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      ErrorLogReader errorLogReader0 = new ErrorLogReader((String) null);
      boolean boolean0 = SQLHelper.close((ResultSet) errorLogReader0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      boolean boolean0 = SQLHelper.close((InputStream) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SQLHelper.close((InputStream) pipedInputStream0);
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = SQLHelper.close((OutputStream) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = SQLHelper.close((OutputStream) pipedOutputStream0);
      assertEquals(true, boolean0);
  }
}
