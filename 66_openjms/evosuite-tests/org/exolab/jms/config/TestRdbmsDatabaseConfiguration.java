/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;
import org.exolab.castor.util.NestedIOException;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.config.RdbmsDatabaseConfiguration;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;
import org.xml.sax.ext.DefaultHandler2;

@RunWith(EvoSuiteRunner.class)
public class TestRdbmsDatabaseConfiguration {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.hasTestBeforeUse();
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
  }

  @Test
  public void test1()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      int int0 = rdbmsDatabaseConfiguration0.getEvictionInterval();
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(0, int0);
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
  }

  @Test
  public void test2()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      int int0 = rdbmsDatabaseConfiguration0.getMinIdleTime();
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(0, int0);
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
  }

  @Test
  public void test3()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      int int0 = rdbmsDatabaseConfiguration0.getMaxActive();
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, int0);
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
  }

  @Test
  public void test4()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      int int0 = rdbmsDatabaseConfiguration0.getMaxIdle();
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, int0);
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
  }

  @Test
  public void test5()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.hasBatch();
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
  }

  @Test
  public void test6()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.deleteTestBeforeUse();
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(false, rdbmsDatabaseConfiguration0.hasTestBeforeUse());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
  }

  @Test
  public void test7()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.setEvictionInterval(0);
      assertEquals(true, rdbmsDatabaseConfiguration0.hasEvictionInterval());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
  }

  @Test
  public void test8()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.setBatchSize((-1578));
      assertEquals(-1578, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
  }

  @Test
  public void test9()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.getUser();
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
  }

  @Test
  public void test10()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      StringWriter stringWriter0 = new StringWriter();
      try {
        rdbmsDatabaseConfiguration0.marshal((Writer) stringWriter0);
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * driver is a required field.
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.deleteEvictionInterval();
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(false, rdbmsDatabaseConfiguration0.hasEvictionInterval());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
  }

  @Test
  public void test12()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.getPassword();
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
  }

  @Test
  public void test13()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.setDriver("");
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
  }

  @Test
  public void test14()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.setMinIdleTime(0);
      assertEquals(true, rdbmsDatabaseConfiguration0.hasMinIdleTime());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
  }

  @Test
  public void test15()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      boolean boolean0 = rdbmsDatabaseConfiguration0.getBatch();
      assertEquals(false, boolean0);
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
  }

  @Test
  public void test16()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.hasEvictionInterval();
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
  }

  @Test
  public void test17()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.hasMaxActive();
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
  }

  @Test
  public void test18()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.setTestBeforeUse(false);
      assertEquals(true, rdbmsDatabaseConfiguration0.hasTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
  }

  @Test
  public void test19()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try {
        rdbmsDatabaseConfiguration0.marshal((ContentHandler) defaultHandler2_0);
        fail("Expecting exception: NestedIOException");
      } catch(NestedIOException e) {
        /*
         * System property org.xml.sax.parser not specified
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.getUrl();
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
  }

  @Test
  public void test21()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      boolean boolean0 = rdbmsDatabaseConfiguration0.isValid();
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(false, boolean0);
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
  }

  @Test
  public void test22()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.setUser("http://apache.org/xml/properties/internal/document-scanner");
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
  }

  @Test
  public void test23()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.hasMinIdleTime();
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
  }

  @Test
  public void test24()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.setMaxActive(0);
      assertEquals(true, rdbmsDatabaseConfiguration0.hasMaxActive());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
  }

  @Test
  public void test25()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.hasBatchSize();
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
  }

  @Test
  public void test26()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.setMaxIdle(0);
      assertEquals(true, rdbmsDatabaseConfiguration0.hasMaxIdle());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
  }

  @Test
  public void test27()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.setTestQuery("");
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
  }

  @Test
  public void test28()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.deleteMaxActive();
      assertEquals(false, rdbmsDatabaseConfiguration0.hasMaxActive());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
  }

  @Test
  public void test29()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.deleteBatch();
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(false, rdbmsDatabaseConfiguration0.hasBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
  }

  @Test
  public void test30()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.setUrl("");
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
  }

  @Test
  public void test31()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      boolean boolean0 = rdbmsDatabaseConfiguration0.getTestBeforeUse();
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(false, boolean0);
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
  }

  @Test
  public void test32()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.getTestQuery();
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
  }

  @Test
  public void test33()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.deleteBatchSize();
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.hasBatchSize());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
  }

  @Test
  public void test34()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.setPassword("");
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
  }

  @Test
  public void test35()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.hasMaxIdle();
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
  }

  @Test
  public void test36()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.deleteMinIdleTime();
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(false, rdbmsDatabaseConfiguration0.hasMinIdleTime());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
  }

  @Test
  public void test37()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.setBatch(false);
      assertEquals(true, rdbmsDatabaseConfiguration0.hasBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
  }

  @Test
  public void test38()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      rdbmsDatabaseConfiguration0.deleteMaxIdle();
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(10, rdbmsDatabaseConfiguration0.getBatchSize());
      assertEquals(false, rdbmsDatabaseConfiguration0.hasMaxIdle());
  }

  @Test
  public void test39()  throws Throwable  {
      RdbmsDatabaseConfiguration rdbmsDatabaseConfiguration0 = new RdbmsDatabaseConfiguration();
      int int0 = rdbmsDatabaseConfiguration0.getBatchSize();
      assertEquals("org.exolab.jms.persistence.DBCPConnectionManager", rdbmsDatabaseConfiguration0.getClazz());
      assertEquals(10, int0);
      assertEquals(false, rdbmsDatabaseConfiguration0.getBatch());
      assertEquals(0, rdbmsDatabaseConfiguration0.getMinIdleTime());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxIdle());
      assertEquals(false, rdbmsDatabaseConfiguration0.getTestBeforeUse());
      assertEquals(10, rdbmsDatabaseConfiguration0.getMaxActive());
  }

  @Test
  public void test40()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try {
        RdbmsDatabaseConfiguration.unmarshal((Reader) pipedReader0);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * Pipe not connected
         */
      }
  }
}
