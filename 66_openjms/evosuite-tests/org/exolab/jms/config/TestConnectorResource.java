/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.Writer;
import org.exolab.castor.util.NestedIOException;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.config.ConnectorResource;
import org.exolab.jms.config.Jndi;
import org.exolab.jms.config.Server;
import org.exolab.jms.config.types.SchemeType;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;
import org.xml.sax.ext.DefaultHandler2;

@RunWith(EvoSuiteRunner.class)
public class TestConnectorResource {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ConnectorResource connectorResource0 = new ConnectorResource();
      PipedWriter pipedWriter0 = new PipedWriter();
      try {
        connectorResource0.marshal((Writer) pipedWriter0);
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * description is a required field.
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ConnectorResource connectorResource0 = new ConnectorResource();
      boolean boolean0 = connectorResource0.isValid();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      ConnectorResource connectorResource0 = new ConnectorResource();
      connectorResource0.setScheme((SchemeType) null);
      assertEquals(false, connectorResource0.isValid());
  }

  @Test
  public void test3()  throws Throwable  {
      ConnectorResource connectorResource0 = new ConnectorResource();
      connectorResource0.setJndi((Jndi) null);
      assertEquals(false, connectorResource0.isValid());
  }

  @Test
  public void test4()  throws Throwable  {
      ConnectorResource connectorResource0 = new ConnectorResource();
      Jndi jndi0 = connectorResource0.getJndi();
      assertNull(jndi0);
  }

  @Test
  public void test5()  throws Throwable  {
      ConnectorResource connectorResource0 = new ConnectorResource();
      SchemeType schemeType0 = connectorResource0.getScheme();
      assertNull(schemeType0);
  }

  @Test
  public void test6()  throws Throwable  {
      ConnectorResource connectorResource0 = new ConnectorResource();
      Server server0 = connectorResource0.getServer();
      assertNull(server0);
  }

  @Test
  public void test7()  throws Throwable  {
      ConnectorResource connectorResource0 = new ConnectorResource();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try {
        connectorResource0.marshal((ContentHandler) defaultHandler2_0);
        fail("Expecting exception: NestedIOException");
      } catch(NestedIOException e) {
        /*
         * System property org.xml.sax.parser not specified
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ConnectorResource connectorResource0 = new ConnectorResource();
      connectorResource0.setDescription("''dvYOE.dd7 l");
      assertEquals(false, connectorResource0.isValid());
  }

  @Test
  public void test9()  throws Throwable  {
      ConnectorResource connectorResource0 = new ConnectorResource();
      connectorResource0.setServer((Server) null);
      assertNull(connectorResource0.getDescription());
  }

  @Test
  public void test10()  throws Throwable  {
      try {
        ConnectorResource.unmarshal((Reader) null);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * 
         */
      }
  }
}
