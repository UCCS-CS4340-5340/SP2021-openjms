/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import org.exolab.castor.util.NestedIOException;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.config.TcpsConfiguration;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;
import org.xml.sax.helpers.XMLFilterImpl;

@RunWith(EvoSuiteRunner.class)
public class TestTcpsConfiguration {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      tcpsConfiguration0.setNeedClientAuth(false);
      assertEquals(true, tcpsConfiguration0.hasNeedClientAuth());
  }

  @Test
  public void test1()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      // Undeclared exception!
      try {
        tcpsConfiguration0.marshal((Writer) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'out' is null.
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      boolean boolean0 = tcpsConfiguration0.getNeedClientAuth();
      assertEquals("${openjms.home}/config/openjms.keystore", tcpsConfiguration0.getKeyStore());
      assertEquals("JKS", tcpsConfiguration0.getKeyStoreType());
      assertEquals("JKS", tcpsConfiguration0.getTrustStoreType());
      assertEquals("openjms", tcpsConfiguration0.getKeyStorePassword());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      try {
        tcpsConfiguration0.marshal((ContentHandler) xMLFilterImpl0);
        fail("Expecting exception: NestedIOException");
      } catch(NestedIOException e) {
        /*
         * System property org.xml.sax.parser not specified
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      tcpsConfiguration0.setTrustStore("JKS");
      assertEquals("${openjms.home}/config/openjms.keystore", tcpsConfiguration0.getKeyStore());
      assertEquals("JKS", tcpsConfiguration0.getKeyStoreType());
      assertEquals("JKS", tcpsConfiguration0.getTrustStoreType());
      assertEquals(false, tcpsConfiguration0.getNeedClientAuth());
      assertEquals("openjms", tcpsConfiguration0.getKeyStorePassword());
  }

  @Test
  public void test5()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      tcpsConfiguration0.deleteNeedClientAuth();
      assertEquals(false, tcpsConfiguration0.getNeedClientAuth());
      assertEquals(false, tcpsConfiguration0.hasNeedClientAuth());
      assertEquals("${openjms.home}/config/openjms.keystore", tcpsConfiguration0.getKeyStore());
      assertEquals("JKS", tcpsConfiguration0.getTrustStoreType());
      assertEquals("JKS", tcpsConfiguration0.getKeyStoreType());
      assertEquals("openjms", tcpsConfiguration0.getKeyStorePassword());
  }

  @Test
  public void test6()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      String string0 = tcpsConfiguration0.getKeyStoreType();
      assertEquals(false, tcpsConfiguration0.getNeedClientAuth());
      assertEquals("JKS", string0);
      assertEquals("openjms", tcpsConfiguration0.getKeyStorePassword());
      assertNotNull(string0);
      assertEquals("JKS", tcpsConfiguration0.getTrustStoreType());
      assertEquals("${openjms.home}/config/openjms.keystore", tcpsConfiguration0.getKeyStore());
  }

  @Test
  public void test7()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      String string0 = tcpsConfiguration0.getKeyStore();
      assertNotNull(string0);
      assertEquals("JKS", tcpsConfiguration0.getTrustStoreType());
      assertEquals("${openjms.home}/config/openjms.keystore", string0);
      assertEquals("openjms", tcpsConfiguration0.getKeyStorePassword());
      assertEquals(false, tcpsConfiguration0.getNeedClientAuth());
      assertEquals("JKS", tcpsConfiguration0.getKeyStoreType());
  }

  @Test
  public void test8()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      tcpsConfiguration0.setTrustStorePassword("");
      assertEquals("JKS", tcpsConfiguration0.getKeyStoreType());
      assertEquals(false, tcpsConfiguration0.getNeedClientAuth());
      assertEquals("JKS", tcpsConfiguration0.getTrustStoreType());
      assertEquals("openjms", tcpsConfiguration0.getKeyStorePassword());
      assertEquals("${openjms.home}/config/openjms.keystore", tcpsConfiguration0.getKeyStore());
  }

  @Test
  public void test9()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      String string0 = tcpsConfiguration0.getKeyStorePassword();
      assertNotNull(string0);
      assertEquals("JKS", tcpsConfiguration0.getTrustStoreType());
      assertEquals("${openjms.home}/config/openjms.keystore", tcpsConfiguration0.getKeyStore());
      assertEquals("openjms", string0);
      assertEquals(false, tcpsConfiguration0.getNeedClientAuth());
      assertEquals("JKS", tcpsConfiguration0.getKeyStoreType());
  }

  @Test
  public void test10()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      String string0 = tcpsConfiguration0.getTrustStoreType();
      assertEquals("openjms", tcpsConfiguration0.getKeyStorePassword());
      assertEquals("JKS", tcpsConfiguration0.getKeyStoreType());
      assertEquals(false, tcpsConfiguration0.getNeedClientAuth());
      assertEquals("${openjms.home}/config/openjms.keystore", tcpsConfiguration0.getKeyStore());
      assertNotNull(string0);
      assertEquals("JKS", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      boolean boolean0 = tcpsConfiguration0.isValid();
      assertEquals("openjms", tcpsConfiguration0.getKeyStorePassword());
      assertEquals("JKS", tcpsConfiguration0.getTrustStoreType());
      assertEquals(false, boolean0);
      assertEquals(false, tcpsConfiguration0.getNeedClientAuth());
      assertEquals("JKS", tcpsConfiguration0.getKeyStoreType());
      assertEquals("${openjms.home}/config/openjms.keystore", tcpsConfiguration0.getKeyStore());
  }

  @Test
  public void test12()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      tcpsConfiguration0.getTrustStore();
      assertEquals("${openjms.home}/config/openjms.keystore", tcpsConfiguration0.getKeyStore());
      assertEquals("JKS", tcpsConfiguration0.getTrustStoreType());
      assertEquals("JKS", tcpsConfiguration0.getKeyStoreType());
      assertEquals("openjms", tcpsConfiguration0.getKeyStorePassword());
      assertEquals(false, tcpsConfiguration0.getNeedClientAuth());
  }

  @Test
  public void test13()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      tcpsConfiguration0.hasNeedClientAuth();
      assertEquals(false, tcpsConfiguration0.getNeedClientAuth());
      assertEquals("JKS", tcpsConfiguration0.getTrustStoreType());
      assertEquals("JKS", tcpsConfiguration0.getKeyStoreType());
      assertEquals("openjms", tcpsConfiguration0.getKeyStorePassword());
      assertEquals("${openjms.home}/config/openjms.keystore", tcpsConfiguration0.getKeyStore());
  }

  @Test
  public void test14()  throws Throwable  {
      TcpsConfiguration tcpsConfiguration0 = new TcpsConfiguration();
      tcpsConfiguration0.getTrustStorePassword();
      assertEquals("openjms", tcpsConfiguration0.getKeyStorePassword());
      assertEquals("JKS", tcpsConfiguration0.getKeyStoreType());
      assertEquals("JKS", tcpsConfiguration0.getTrustStoreType());
      assertEquals(false, tcpsConfiguration0.getNeedClientAuth());
      assertEquals("${openjms.home}/config/openjms.keystore", tcpsConfiguration0.getKeyStore());
  }

  @Test
  public void test15()  throws Throwable  {
      try {
        TcpsConfiguration.unmarshal((Reader) null);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * 
         */
      }
  }
}
