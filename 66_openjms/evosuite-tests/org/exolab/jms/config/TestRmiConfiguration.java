/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.Reader;
import java.io.Writer;
import org.exolab.castor.util.NestedIOException;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.config.RmiConfiguration;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;
import org.xml.sax.ext.DefaultHandler2;

@RunWith(EvoSuiteRunner.class)
public class TestRmiConfiguration {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RmiConfiguration rmiConfiguration0 = new RmiConfiguration();
      rmiConfiguration0.setClientPingInterval((-1946));
      assertEquals(true, rmiConfiguration0.hasClientPingInterval());
      assertEquals("localhost", rmiConfiguration0.getRegistryHost());
  }

  @Test
  public void test1()  throws Throwable  {
      RmiConfiguration rmiConfiguration0 = new RmiConfiguration();
      rmiConfiguration0.setEmbeddedRegistry(true);
      assertEquals(true, rmiConfiguration0.hasEmbeddedRegistry());
      assertEquals(15, rmiConfiguration0.getClientPingInterval());
  }

  @Test
  public void test2()  throws Throwable  {
      RmiConfiguration rmiConfiguration0 = new RmiConfiguration();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try {
        rmiConfiguration0.marshal((ContentHandler) defaultHandler2_0);
        fail("Expecting exception: NestedIOException");
      } catch(NestedIOException e) {
        /*
         * System property org.xml.sax.parser not specified
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      RmiConfiguration rmiConfiguration0 = new RmiConfiguration();
      boolean boolean0 = rmiConfiguration0.isValid();
      assertEquals(1099, rmiConfiguration0.getRegistryPort());
      assertEquals(true, boolean0);
      assertEquals("localhost", rmiConfiguration0.getRegistryHost());
      assertEquals(true, rmiConfiguration0.getEmbeddedRegistry());
      assertEquals(15, rmiConfiguration0.getClientPingInterval());
  }

  @Test
  public void test4()  throws Throwable  {
      RmiConfiguration rmiConfiguration0 = new RmiConfiguration();
      rmiConfiguration0.deleteClientPingInterval();
      assertEquals(true, rmiConfiguration0.getEmbeddedRegistry());
      assertEquals(15, rmiConfiguration0.getClientPingInterval());
      assertEquals(false, rmiConfiguration0.hasClientPingInterval());
      assertEquals(1099, rmiConfiguration0.getRegistryPort());
      assertEquals("localhost", rmiConfiguration0.getRegistryHost());
  }

  @Test
  public void test5()  throws Throwable  {
      RmiConfiguration rmiConfiguration0 = new RmiConfiguration();
      rmiConfiguration0.deleteRegistryPort();
      assertEquals(1099, rmiConfiguration0.getRegistryPort());
      assertEquals("localhost", rmiConfiguration0.getRegistryHost());
      assertEquals(false, rmiConfiguration0.hasRegistryPort());
      assertEquals(15, rmiConfiguration0.getClientPingInterval());
      assertEquals(true, rmiConfiguration0.getEmbeddedRegistry());
  }

  @Test
  public void test6()  throws Throwable  {
      RmiConfiguration rmiConfiguration0 = new RmiConfiguration();
      rmiConfiguration0.setRegistryPort((-1));
      boolean boolean0 = rmiConfiguration0.isValid();
      assertEquals(true, rmiConfiguration0.hasRegistryPort());
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      RmiConfiguration rmiConfiguration0 = new RmiConfiguration();
      rmiConfiguration0.deleteEmbeddedRegistry();
      assertEquals(true, rmiConfiguration0.getEmbeddedRegistry());
      assertEquals("localhost", rmiConfiguration0.getRegistryHost());
      assertEquals(false, rmiConfiguration0.hasEmbeddedRegistry());
      assertEquals(1099, rmiConfiguration0.getRegistryPort());
      assertEquals(15, rmiConfiguration0.getClientPingInterval());
  }

  @Test
  public void test8()  throws Throwable  {
      RmiConfiguration rmiConfiguration0 = new RmiConfiguration();
      int int0 = rmiConfiguration0.getClientPingInterval();
      assertEquals("localhost", rmiConfiguration0.getRegistryHost());
      assertEquals(true, rmiConfiguration0.getEmbeddedRegistry());
      assertEquals(1099, rmiConfiguration0.getRegistryPort());
      assertEquals(15, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      RmiConfiguration rmiConfiguration0 = new RmiConfiguration();
      boolean boolean0 = rmiConfiguration0.getEmbeddedRegistry();
      assertEquals(15, rmiConfiguration0.getClientPingInterval());
      assertEquals(1099, rmiConfiguration0.getRegistryPort());
      assertEquals("localhost", rmiConfiguration0.getRegistryHost());
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      RmiConfiguration rmiConfiguration0 = new RmiConfiguration();
      // Undeclared exception!
      try {
        rmiConfiguration0.marshal((Writer) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'out' is null.
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1);
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) pipedReader0);
      try {
        RmiConfiguration.unmarshal((Reader) lineNumberReader0);
        fail("Expecting exception: MarshalException");
      } catch(MarshalException e) {
        /*
         * Pipe not connected
         */
      }
  }
}
