/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.exolab.castor.xml.ValidationException;
import org.exolab.jms.config.HttpsConfigurationDescriptor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestHttpsConfigurationDescriptor {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      HttpsConfigurationDescriptor httpsConfigurationDescriptor0 = new HttpsConfigurationDescriptor();
      httpsConfigurationDescriptor0.getExtends();
      assertEquals("http://openjms.exolab.org/configuration", httpsConfigurationDescriptor0.getNameSpaceURI());
      assertEquals("HttpsConfiguration", httpsConfigurationDescriptor0.getXMLName());
  }

  @Test
  public void test1()  throws Throwable  {
      HttpsConfigurationDescriptor httpsConfigurationDescriptor0 = new HttpsConfigurationDescriptor();
      httpsConfigurationDescriptor0.getNameSpacePrefix();
      assertEquals("HttpsConfiguration", httpsConfigurationDescriptor0.getXMLName());
      assertEquals("http://openjms.exolab.org/configuration", httpsConfigurationDescriptor0.getNameSpaceURI());
  }

  @Test
  public void test2()  throws Throwable  {
      HttpsConfigurationDescriptor httpsConfigurationDescriptor0 = new HttpsConfigurationDescriptor();
      String string0 = httpsConfigurationDescriptor0.getXMLName();
      assertEquals("http://openjms.exolab.org/configuration", httpsConfigurationDescriptor0.getNameSpaceURI());
      assertNotNull(string0);
      assertEquals("HttpsConfiguration", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      HttpsConfigurationDescriptor httpsConfigurationDescriptor0 = new HttpsConfigurationDescriptor();
      HttpsConfigurationDescriptor httpsConfigurationDescriptor1 = (HttpsConfigurationDescriptor)httpsConfigurationDescriptor0.getValidator();
      assertEquals("HttpsConfiguration", httpsConfigurationDescriptor0.getXMLName());
      assertEquals("http://openjms.exolab.org/configuration", httpsConfigurationDescriptor0.getNameSpaceURI());
      assertEquals("http://openjms.exolab.org/configuration", httpsConfigurationDescriptor1.getNameSpaceURI());
  }

  @Test
  public void test4()  throws Throwable  {
      HttpsConfigurationDescriptor httpsConfigurationDescriptor0 = new HttpsConfigurationDescriptor();
      String string0 = httpsConfigurationDescriptor0.getNameSpaceURI();
      assertEquals("http://openjms.exolab.org/configuration", string0);
      assertEquals("HttpsConfiguration", httpsConfigurationDescriptor0.getXMLName());
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      HttpsConfigurationDescriptor httpsConfigurationDescriptor0 = new HttpsConfigurationDescriptor();
      httpsConfigurationDescriptor0.getAccessMode();
      assertEquals("http://openjms.exolab.org/configuration", httpsConfigurationDescriptor0.getNameSpaceURI());
      assertEquals("HttpsConfiguration", httpsConfigurationDescriptor0.getXMLName());
  }

  @Test
  public void test6()  throws Throwable  {
      HttpsConfigurationDescriptor httpsConfigurationDescriptor0 = new HttpsConfigurationDescriptor();
      httpsConfigurationDescriptor0.getIdentity();
      assertEquals("HttpsConfiguration", httpsConfigurationDescriptor0.getXMLName());
      assertEquals("http://openjms.exolab.org/configuration", httpsConfigurationDescriptor0.getNameSpaceURI());
  }

  @Test
  public void test7()  throws Throwable  {
      HttpsConfigurationDescriptor httpsConfigurationDescriptor0 = new HttpsConfigurationDescriptor();
      try {
        httpsConfigurationDescriptor0.validate((Object) "http://openjms.exolab.org/configuration");
        fail("Expecting exception: ValidationException");
      } catch(ValidationException e) {
        /*
         * The given object is not an instance of the class described by this ClassDecriptor.
         */
      }
  }
}
