/*
 * This file was automatically generated by EvoSuite
 */

package org.exolab.jms.messagemgr;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import javax.jms.IllegalStateException;
import javax.jms.JMSException;
import org.exolab.jms.client.JmsDestination;
import org.exolab.jms.client.JmsQueue;
import org.exolab.jms.client.JmsTemporaryQueue;
import org.exolab.jms.client.JmsTemporaryTopic;
import org.exolab.jms.client.JmsTopic;
import org.exolab.jms.message.MessageImpl;
import org.exolab.jms.message.TextMessageImpl;
import org.exolab.jms.messagemgr.DestinationCache;
import org.exolab.jms.messagemgr.MessageHandle;
import org.exolab.jms.messagemgr.MessageRef;
import org.exolab.jms.messagemgr.PersistentMessageHandle;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestAbstractMessageHandle {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      JmsTopic jmsTopic0 = new JmsTopic("");
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("", (-1265), (long) (-1265), (long) (-1265), (long) (-1265), (JmsDestination) jmsTopic0, "");
      assertNotNull(persistentMessageHandle0);
      
      String string0 = persistentMessageHandle0.toString();
      assertNotNull(string0);
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertEquals("MessageHandle : -1265:-1265:-1265:", string0);
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
      assertEquals(true, persistentMessageHandle0.hasExpired());
  }

  @Test
  public void test1()  throws Throwable  {
      JmsTopic jmsTopic0 = new JmsTopic("");
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("", (-1265), (long) (-1265), (long) (-1265), (long) (-1265), (JmsDestination) jmsTopic0, "");
      assertNotNull(persistentMessageHandle0);
      assertEquals(false, persistentMessageHandle0.getDelivered());
      
      persistentMessageHandle0.setDelivered(true);
      assertEquals(true, persistentMessageHandle0.getDelivered());
      assertEquals("MessageHandle : -1265:-1265:-1265:", persistentMessageHandle0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue();
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("", (-479), (long) (-479), (long) (-479), 0L, (JmsDestination) jmsQueue0);
      assertNotNull(persistentMessageHandle0);
      
      persistentMessageHandle0.hashCode();
      assertEquals(false, persistentMessageHandle0.hasExpired());
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
      assertEquals("MessageHandle : -479:-479:-479:", persistentMessageHandle0.toString());
      assertEquals(0L, persistentMessageHandle0.getExpiryTime());
  }

  @Test
  public void test3()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue("");
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("", 100, (long) 100, (long) 100, (long) 100, (JmsDestination) jmsQueue0);
      assertNotNull(persistentMessageHandle0);
      
      persistentMessageHandle0.setMessageRef((MessageRef) null);
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
      assertEquals("MessageHandle : 100:100:100:", persistentMessageHandle0.toString());
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
      assertEquals(100L, persistentMessageHandle0.getExpiryTime());
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertEquals(100L, persistentMessageHandle0.getSequenceNumber());
  }

  @Test
  public void test4()  throws Throwable  {
      JmsTopic jmsTopic0 = new JmsTopic("");
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("", (-1265), (long) (-1265), (long) (-1265), (long) (-1265), (JmsDestination) jmsTopic0, "");
      assertNotNull(persistentMessageHandle0);
      
      long long0 = persistentMessageHandle0.getExpiryTime();
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertEquals("MessageHandle : -1265:-1265:-1265:", persistentMessageHandle0.toString());
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
      assertEquals((-1265L), long0);
  }

  @Test
  public void test5()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue();
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle(")qJ7]09J", 64399, (long) 64399, (long) 64399, (long) 64399, (JmsDestination) jmsQueue0);
      assertNotNull(persistentMessageHandle0);
      
      boolean boolean0 = persistentMessageHandle0.getDelivered();
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
      assertEquals(64399L, persistentMessageHandle0.getExpiryTime());
      assertEquals("MessageHandle : 64399:64399:64399:)qJ7]09J", persistentMessageHandle0.toString());
      assertEquals(false, boolean0);
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
  }

  @Test
  public void test6()  throws Throwable  {
      JmsTopic jmsTopic0 = new JmsTopic("");
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("", (-1265), (long) (-1265), (long) (-1265), (long) (-1265), (JmsDestination) jmsTopic0, "");
      assertNotNull(persistentMessageHandle0);
      
      String string0 = persistentMessageHandle0.getMessageId();
      assertEquals(true, persistentMessageHandle0.hasExpired());
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertNotNull(string0);
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
      assertEquals("MessageHandle : -1265:-1265:-1265:", persistentMessageHandle0.toString());
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
  }

  @Test
  public void test7()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue();
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("", (-479), (long) (-479), (long) (-479), 0L, (JmsDestination) jmsQueue0);
      assertNotNull(persistentMessageHandle0);
      
      long long0 = persistentMessageHandle0.getConnectionId();
      assertEquals(false, persistentMessageHandle0.hasExpired());
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
      assertEquals((-1L), long0);
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertEquals("MessageHandle : -479:-479:-479:", persistentMessageHandle0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue();
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle(")qJ7]09J", 64399, (long) 64399, (long) 64399, (long) 64399, (JmsDestination) jmsQueue0);
      assertNotNull(persistentMessageHandle0);
      
      int int0 = persistentMessageHandle0.getPriority();
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
      assertEquals("MessageHandle : 64399:64399:64399:)qJ7]09J", persistentMessageHandle0.toString());
      assertEquals(64399, int0);
      assertEquals(64399L, persistentMessageHandle0.getExpiryTime());
  }

  @Test
  public void test9()  throws Throwable  {
      JmsTopic jmsTopic0 = new JmsTopic();
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("", 0, (long) 0, (long) 0, (long) 0, (JmsDestination) jmsTopic0, "");
      assertNotNull(persistentMessageHandle0);
      
      persistentMessageHandle0.setDestinationCache((DestinationCache) null);
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
      assertEquals("MessageHandle : 0:0:0:", persistentMessageHandle0.toString());
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertEquals(0, persistentMessageHandle0.getPriority());
  }

  @Test
  public void test10()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue("");
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("", 100, (long) 100, (long) 100, (long) 100, (JmsDestination) jmsQueue0);
      assertNotNull(persistentMessageHandle0);
      
      persistentMessageHandle0.getMessageRef();
      assertEquals(100L, persistentMessageHandle0.getExpiryTime());
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
      assertEquals("MessageHandle : 100:100:100:", persistentMessageHandle0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      JmsTemporaryTopic jmsTemporaryTopic0 = new JmsTemporaryTopic();
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("\"", (-1024), 0L, 0L, 0L, (JmsDestination) jmsTemporaryTopic0, "\"");
      assertNotNull(persistentMessageHandle0);
      
      long long0 = persistentMessageHandle0.getConsumerId();
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
      assertEquals(-1024, persistentMessageHandle0.getPriority());
      assertEquals((-1L), long0);
      assertEquals(false, persistentMessageHandle0.getDelivered());
  }

  @Test
  public void test12()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue();
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("", (-479), (long) (-479), (long) (-479), 0L, (JmsDestination) jmsQueue0);
      assertNotNull(persistentMessageHandle0);
      
      JmsQueue jmsQueue1 = (JmsQueue)persistentMessageHandle0.getDestination();
      assertEquals("MessageHandle : -479:-479:-479:", persistentMessageHandle0.toString());
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertEquals(0L, persistentMessageHandle0.getExpiryTime());
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
      assertNotNull(jmsQueue1);
  }

  @Test
  public void test13()  throws Throwable  {
      TextMessageImpl textMessageImpl0 = new TextMessageImpl();
      PersistentMessageHandle persistentMessageHandle0 = null;
      try {
        persistentMessageHandle0 = new PersistentMessageHandle((MessageImpl) textMessageImpl0, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'messageId' is null
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      PersistentMessageHandle persistentMessageHandle0 = null;
      try {
        persistentMessageHandle0 = new PersistentMessageHandle("%CQQ\"Z8|UL#", 191, (long) 191, (long) 191, (long) 191, (JmsDestination) null, "%CQQ\"Z8|UL#");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Argument 'destination' is null
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      JmsTemporaryTopic jmsTemporaryTopic0 = new JmsTemporaryTopic();
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("\"", (-1024), 0L, 0L, 0L, (JmsDestination) jmsTemporaryTopic0, "\"");
      assertNotNull(persistentMessageHandle0);
      
      try {
        persistentMessageHandle0.getMessage();
        fail("Expecting exception: JMSException");
      } catch(JMSException e) {
        /*
         * Cannot get message with identifier=\": MessageRef null
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue();
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("", (-479), (long) (-479), (long) (-479), 0L, (JmsDestination) jmsQueue0);
      assertNotNull(persistentMessageHandle0);
      
      boolean boolean0 = persistentMessageHandle0.hasExpired();
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
      assertEquals("MessageHandle : -479:-479:-479:", persistentMessageHandle0.toString());
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertEquals(false, boolean0);
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
  }

  @Test
  public void test17()  throws Throwable  {
      JmsTemporaryTopic jmsTemporaryTopic0 = new JmsTemporaryTopic();
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("afHJPbeXNl", 0, (long) 0, (long) 0, 1L, (JmsDestination) jmsTemporaryTopic0, "afHJPbeXNl");
      assertNotNull(persistentMessageHandle0);
      
      boolean boolean0 = persistentMessageHandle0.hasExpired();
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
      assertEquals(1L, persistentMessageHandle0.getExpiryTime());
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
      assertEquals("MessageHandle : 0:0:0:afHJPbeXNl", persistentMessageHandle0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      JmsTopic jmsTopic0 = new JmsTopic("d'");
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("d'", (-973), (long) (-973), (long) (-973), (long) (-973), (JmsDestination) jmsTopic0, "d'");
      assertNotNull(persistentMessageHandle0);
      
      boolean boolean0 = persistentMessageHandle0.hasExpired();
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
      assertEquals(true, boolean0);
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
      assertEquals("MessageHandle : -973:-973:-973:d'", persistentMessageHandle0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue("");
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("", 1266, (long) 1266, (long) 1266, (long) 1266, (JmsDestination) jmsQueue0, "");
      assertNotNull(persistentMessageHandle0);
      
      boolean boolean0 = persistentMessageHandle0.equals((Object) "");
      assertEquals(false, boolean0);
      assertEquals((-1L), persistentMessageHandle0.getConsumerId());
      assertEquals("MessageHandle : 1266:1266:1266:", persistentMessageHandle0.toString());
      assertEquals(1266L, persistentMessageHandle0.getExpiryTime());
      assertEquals(false, persistentMessageHandle0.getDelivered());
      assertEquals((-1L), persistentMessageHandle0.getConnectionId());
  }

  @Test
  public void test20()  throws Throwable  {
      JmsTemporaryQueue jmsTemporaryQueue0 = new JmsTemporaryQueue();
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("g}f0b9]d", 0, (long) 0, (long) 0, (long) 0, (JmsDestination) jmsTemporaryQueue0, "g}f0b9]d");
      assertNotNull(persistentMessageHandle0);
      
      try {
        persistentMessageHandle0.release();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Can't release message: not associated with any cache
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      JmsQueue jmsQueue0 = new JmsQueue("+:A~PExLNTD!G]Z");
      PersistentMessageHandle persistentMessageHandle0 = new PersistentMessageHandle("+:A~PExLNTD!G]Z", (-5), (long) (-5), (long) (-5), (long) (-5), (JmsDestination) jmsQueue0);
      assertNotNull(persistentMessageHandle0);
      
      try {
        persistentMessageHandle0.release((MessageHandle) persistentMessageHandle0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Can't release message: not associated with any cache
         */
      }
  }
}
